name: Docker + helm Release
on:
  workflow_dispatch:
    inputs:
      release:
        description: 'Release version'
        required: true
        type: string
permissions:
  contents: write
  packages: write
run-name: ${{ github.repository }} Release ${{ github.event.inputs.release }}
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  check-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Check if tag exists
        id: check_tag
        uses: netcracker/qubership-workflow-hub/actions/tag-action@main
        with:
          tag-name: '${{ inputs.release }}'
          ref: ${{ github.ref }}
          create-tag: false
          check-tag: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  load-docker-build-components:
    runs-on: ubuntu-latest
    outputs:
      component: ${{ steps.load_component.outputs.components }}
      platforms: ${{ steps.load_component.outputs.platforms }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load Docker Configuration
        id: load_component
        run: |
          verify=$(cat "$GITHUB_WORKSPACE/.github/docker-build-config.json" | jq '
          def verify_structure:
          .components as $components
          | .platforms as $platforms
          | ($components | type == "array")
          and (all($components[]; has("name") and has("file") and has("context")))
          and ($platforms | type == "string");
          verify_structure
          | if . then true else false end
          ')
          if [ ${verify} == 'true' ]; then
            echo "✅ $GITHUB_WORKSPACE/.github/docker-build-config.json file is valid"
            components=$(jq -c ".components" "$GITHUB_WORKSPACE/.github/docker-build-config.json")
            platforms=$(jq -c ".platforms" "$GITHUB_WORKSPACE/.github/docker-build-config.json")
          else
            echo "❗ $GITHUB_WORKSPACE/.github/docker-build-config.json file is invalid"
            echo "❗ $GITHUB_WORKSPACE/.github/docker-build-config.json file is invalid" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          echo "components=${components}" >> $GITHUB_OUTPUT
          echo "platforms=${platforms}" >> $GITHUB_OUTPUT
  

  maven-build:
    needs: [check-tag]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
          server-id: github
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
      - name: Build JAR artifact
        run: mvn clean package -DskipTests
        env:
          MAVEN_USERNAME: ${{ secrets.maven-username }}
          MAVEN_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: service-a
          path: target
          if-no-files-found: error
          retention-days: 1


  docker-check-build:
    needs: [maven-build, load-docker-build-components, check-tag]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        component: ${{ fromJson(needs.load-docker-build-components.outputs.component) }}
    steps:
      - name: Get version for current component
        id: get-version
        run: |
          echo "IMAGE=${{ matrix.component.name }}" >> $GITHUB_ENV
      - name: Docker build
        uses: netcracker/qubership-workflow-hub/actions/docker-action@main
        with:
          ref: ${{ github.ref }}
          download-artifact: true
          download-artifact-path: ./artifacts/${{ matrix.component.name }}
          custom-image-name: ${{ matrix.component.name }}
          dry-run: true
          component: ${{ toJson(matrix.component) }}
          platforms: ${{ needs.load-docker-build-components.outputs.platforms }}
          tags: "${{ env.IMAGE_VERSION }}"
        env:
          GITHUB_TOKEN: ${{ github.token }}


  chart-release-prepare:
    needs: [docker-check-build]
    runs-on: ubuntu-latest
    outputs:
      images-versions: ${{ steps.update-versions.outputs.images-versions }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: "Update versions in values"
        id: update-versions
        uses: netcracker/qubership-workflow-hub/actions/charts-values-update-action@main
        with:
          release-version: ${{ inputs.release }}
          config-file: .github/charts-values-update-config.yaml
        env:
          ${{ insert }}: ${{ vars }}
      - name: "Debug"
        run: |
          echo "Images versions: ${{ steps.update-versions.outputs.images-versions }}"
          

  docker-build:
    needs: [ chart-release-prepare, load-docker-build-components ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        component: ${{ fromJson(needs.load-docker-build-components.outputs.component) }}
    steps:
      - name: Get version for current component
        id: get-version
        run: |
          echo "IMAGE_VERSION=${{ fromJson(needs.chart-release-prepare.outputs.images-versions)[matrix.component.name] || inputs.release }}" >> $GITHUB_ENV

      - name: Docker build
        uses: netcracker/qubership-workflow-hub/actions/docker-action@main
        with:
          ref: release-${{ inputs.release }}
          download-artifact: true
          download-artifact-path: ./artifacts/${{ matrix.component.name }}
          custom-image-name: ${{ matrix.component.name }}
          dry-run: false
          component: ${{ toJson(matrix.component) }}
          platforms: ${{ needs.load-docker-build-components.outputs.platforms }}
          tags: "${{ env.IMAGE_VERSION }},latest"
        env:
          GITHUB_TOKEN: ${{ github.token }}

  charts-release:
    needs: [ docker-build ]
    continue-on-error: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: release-${{ inputs.release }}

      - name: Set up Helm
        uses: azure/setup-helm@v3

      - name: Package Helm chart
        run: |
          cd helm-templates/service-a
          helm package . --destination /tmp/chart-out --version "${{ inputs.release }}"
        shell: bash

      - name: Checkout central repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: taurmorchant/helm-repo
          ref: gh-pages
          token: ${{ secrets.HELM_REPO_GH_TOKEN }}
          path: helm-repo

      - name: Copy packaged chart
        run: |
          cp /tmp/chart-out/service-a-*.tgz helm-repo/packaged-charts/
        shell: bash

      - name: Update index.yaml
        run: |
          cd helm-repo/packaged-charts
          helm repo index . \
            --url https://taurmorchant.github.io/helm-repo/
          mv index.yaml ..
        shell: bash

      - name: Commit & Push to gh-pages
        run: |
          cd helm-repo
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git add packaged-charts/*.tgz index.yaml
          git commit -m "chore(chart): publish service-a v$VERSION"
          git push origin gh-pages
        shell: bash

      - name: "Release-drafter"
        uses: netcracker/release-drafter@master
        with:
          config-name: release-drafter-config.yml
          publish: true
          name: ${{ inputs.release }}
          tag: ${{ inputs.release }}
          version: ${{ inputs.release }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload Assets
        uses: netcracker/qubership-workflow-hub/actions/assets-action@main
        with:
          tag: ${{ inputs.release }}
          item-path: /tmp/chart-out/*.tgz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}